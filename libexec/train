#!/usr/bin/env bash

#/ NAME
#/     build-all - builds vagrant boxes from scratch
#/
#/ SYNOPSIS
#/     bin/build all virtualbox precise
#/     bin/build all virtualbox precise precise clean ...
#/     bin/build all aws precise
#/     bin/build all aws precise precise clean ...

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar
require boxcar_opt

DEFINE_boolean build "$FLAGS_FALSE" "Also run the :build hooks"
DEFINE_boolean clean "$FLAGS_FALSE" "Build the basic clean boxcar"
DEFINE_string final "" "Box name for the end train"

function run {
  logger_info "running $*"
  "$@"
}

function refresh {
  local nm_input="$1"; shift
  local nm_output="$1"; shift

  local nm_box="$nm_output"
  if [[ "$nm_output" != "$FLAGS_release" ]]; then
    nm_box="${FLAGS_release}-${nm_box}"
  fi

  local nm_input_box="${nm_input%%-*}"
  if [[ "$nm_input_box" != "$FLAGS_release" ]]; then
    nm_input_box="${FLAGS_release}-${nm_input}"
  else
    nm_input_box="$nm_input"
  fi

  (cd $FLAGS_builddir/${nm_output} 2>&- && vagrant destroy -f > /dev/null 2>&-) || true
  vagrant box remove --provider $FLAGS_provider --force $nm_box || true

  mkdir -p $FLAGS_builddir
  run $shome/bin/train start \
    --boxname $nm_input_box \
    --release_dir $FLAGS_builddir/${nm_output} \
    --output $FLAGS_builddir/$nm_output.box \
    --username "$FLAGS_username" \
    --address "$FLAGS_address" \
    --anchor "$FLAGS_anchor" \
    --apps "$FLAGS_apps" \
    "$@" 2>&1 | tee $FLAGS_builddir/$nm_output.log
  local err_pipe="$PIPESTATUS"
  if [[ "$err_pipe" != 0 ]]; then
    return "$err_pipe"
  fi

  if [[ "$FLAGS_fast" = "$FLAGS_FALSE" ]]; then
    vagrant box add $nm_box $FLAGS_builddir/$nm_output.box
  fi

  rm -rf $FLAGS_builddir/${nm_output}
}

function build_boxcars {
  # setup the initial box import
  output="$1"; shift

  # build each boxcar
  while [[ "$#" > 0 ]]; do
    local raw_hook="$1"; shift

    adjust_build_phase "$raw_hook"
    nm_hook="${raw_hook%%:*}"
    fuglet "$nm_hook"
    logger_info "hook: $nm_hook, phase: $BUILD_IMAGE_PHASE"
    input="$output"

    if [[ "$#" = 0 && -n "$FLAGS_final" ]]; then
      output="$FLAGS_final"
    else
      if [[ "$nm_hook" = "clean" ]]; then
        output="$output-${nm_hook}(pre)"
      elif [[ "$nm_hook" = "clean-$FLAGS_provider" ]]; then
        output="${output%-clean*}-clean"
      else
        output="$output-$(echo $raw_hook | perl -pe 's{:(\S+)}{($1)}g')"
      fi
    fi

    output="${output#${FLAGS_release}-}"

    refresh $input $output $raw_hook
  done
}

function build_train {
  mark_output
  mark_log "${FLAGS_release}-${FLAGS_provider}"

  FLAGS_builddir="$BOXCAR/build/${FLAGS_release}-${FLAGS_provider}"
  export OVERRIDE_builddir="$FLAGS_builddir"

  FLAGS_cachedir="$VAULT/boxcar/${FLAGS_release}"
  export OVERRIDE_cachedir="$FLAGS_cachedir"

  # boxcar precise
  local train="${FLAGS_release}"

  if [[ "$FLAGS_clean" = "$FLAGS_TRUE" ]]; then
    # boxcar precise -> precise-clean(pre)
    if ! (build_boxcars "$train" "clean"); then
      return 1
    fi

    # boxcar precise-clean(pre) -> precise-clean
    if ! (build_boxcars "$train-clean(pre)" "clean-${FLAGS_provider}"); then
      return 1
    fi

    train="$train-clean"
  else
    # boxcar $1
    if [[ "$1" != "$FLAGS_release" ]]; then
      train="${FLAGS_release}-$1"
    fi
    shift
  fi
  
  if [[ "$#" > 0 ]]; then
    if ! (build_boxcars "$train" "$@"); then
      return 1
    fi
  fi
}

# entry point
function main {
  if [[ -z "${FLAGS_failhook}" ]]; then
    pth_failhook="$(mktemp -t XXXXXX)"
  else 
    pth_failhook="${FLAGS_failhook}"
  fi

  export OVERRIDE_provider="${FLAGS_provider}"
  export OVERRIDE_release="${FLAGS_release}"
  export OVERRIDE_branch="${FLAGS_branch}"
  export OVERRIDE_failhook="${pth_failhook}"
  export OVERRIDE_fast="${FLAGS_fast}"
  export OVERRIDE_username="${FLAGS_username}"
  export OVERRIDE_address="${FLAGS_address}"
  export OVERRIDE_anchor="${FLAGS_anchor}"
  export OVERRIDE_apps="${FLAGS_apps}"

  if ! (build_train "$@"); then
    if [[ -s "$pth_failhook" ]]; then
      fuglet "debug ssh"
      bash $pth_failhook || true
      cat $pth_failhook
    fi
  elif [[ -z "${FLAGS_failhook}" ]]; then
    rm -f $pth_failhook
  fi
}

require sub "$BASH_SOURCE" "$@"
