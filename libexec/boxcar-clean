#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs install-rvm.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_install {
  set -exfu; cd

  export DEBIAN_FRONTEND="noninteractive"

  echo 'APT::Install-Recommends "0";' | tee /etc/apt/apt.conf.d/00DisableInstallRecommends

  # update everything
  aptitude update
  if [[ "$(ps -o command 1 | tail -1)" != "/sbin/init" ]]; then
    mv /usr/bin/ischroot /usr/bin/ischroot.x
    ln -nfs $(which true) /usr/bin/ischroot
  fi
  aptitude -y dist-upgrade
  aptitude -y safe-upgrade
  if [[ "$(ps -o command 1 | tail -1)" != "/sbin/init" ]]; then
    mv /usr/bin/ischroot.x /usr/bin/ischroot
  fi

  source /etc/lsb-release
  if [[ "$DISTRIB_CODENAME" = "precise" ]]; then
    aptitude install -y linux-{generic,tools}-lts-raring
    aptitude hold -y linux-{generic,tools}-lts-raring
  else
    aptitude install -y linux-image-extra-{generic,server,virtual}
    aptitude hold -y linux-image-extra-{generic,server,virtual}
  fi

  # don't upgrade kernel hereafter
  aptitude hold linux-{,{headers,image}-}{generic,server,virtual}

  # basic packages
  aptitude -y install language-pack-en aptitude wget curl git rsync make bsdtar netcat openssh-server dkms

  # package cleanup
  aptitude clean

  # ssl updates
  update-ca-certificates --fresh > /dev/null

  # github.com, bitbucket.org
  cat >> /etc/ssh/ssh_known_hosts <<EOF
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
EOF

  # remove cached network configurations
  rm -rfv /etc/udev/rules.d/70-persistent-net.rules
  mkdir -pv /etc/udev/rules.d/70-persistent-net.rules
  rm -fv /lib/udev/rules.d/75-persistent-net-generator.rules
  rm -rfv /dev/.udev/ /var/lib/dhcp3/*
}

if [[ "$#" = 0 ]]; then
  remote_install
  exit $?
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar
require boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"
  local ssh="ssh -F $pth_ssh_config"

  # enable ubuntu user for vagrant boxes
  if $ssh default id -a vagrant 2>&-; then
    $ssh default sudo install -o ubuntu -g ubuntu -m 0700 -d \~ubuntu/.ssh
    $ssh default sudo install -o ubuntu -g ubuntu -m 0600 \~vagrant/.ssh/authorized_keys \~ubuntu/.ssh/authorized_keys
  fi

  standard_root_hook "$bootstrap" "$@"
}

require sub "$BASH_SOURCE" "$@"
