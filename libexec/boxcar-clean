#!/bin/bash

#/ NAME
#/     seed-rvm.sh - copies rvm ruby binaries and runs install-rvm.sh
#/
#/ SYNOPSIS
#/     seed-rvm.sh ssh_config rubies...

function remote_install {
  set -exfu; cd

  export DEBIAN_FRONTEND="noninteractive"

  # complete list of apt repos
  local nm_distro='precise'
  cat > /etc/cloud/templates/sources.list.tmpl << __EOF
\## Note, this file is written by cloud-init on first boot of an instance
\## modifications made here will not survive a re-bundle.
\## if you wish to make changes you can:
\## a.) add 'apt_preserve_sources_list: true' to /etc/cloud/cloud.cfg
\##     or do the same in user-data
\## b.) add sources in /etc/apt/sources.list.d
\## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl
\###

\## main
deb $mirror $codename main
deb-src $mirror $codename main

\## updates
deb $mirror $codename-updates main
deb-src $mirror $codename-updates main

\## universe
deb $mirror $codename universe
deb-src $mirror $codename universe
deb $mirror $codename-updates universe
deb-src $mirror $codename-updates universe

\## multiverse
deb $mirror $codename multiverse
deb-src $mirror $codename multiverse
deb $mirror $codename-updates multiverse
deb-src $mirror $codename-updates multiverse

\## backports
deb $mirror $codename-backports main restricted universe multiverse
deb-src $mirror $codename-backports main restricted universe multiverse

\## partner
deb http://archive.canonical.com/ubuntu $codename partner
deb-src http://archive.canonical.com/ubuntu $codename partner

\## security
deb http://security.ubuntu.com/ubuntu $codename-security main
deb-src http://security.ubuntu.com/ubuntu $codename-security main
deb http://security.ubuntu.com/ubuntu $codename-security universe
deb-src http://security.ubuntu.com/ubuntu $codename-security universe
deb http://security.ubuntu.com/ubuntu $codename-security multiverse
deb-src http://security.ubuntu.com/ubuntu $codename-security multiverse
__EOF

  # cloud init to enable root and regenerate apt sources.list
  local tmp_cloud="$(mktemp -t XXXXXX)"

  sudo mkdir -p $prefix/var/lib/cloud/seed/nocloud

  cat > /var/lib/cloud/seed/nocloud/meta-data << __EOF
instance-id: precise-$(date +%s)-$$
__EOF
  sudo install -o root -g root -m 0600 $tmp_cloud $prefix/var/lib/cloud/seed/nocloud/meta-data

  cat > $tmp_cloud  << __EOF
#cloud-config

disable_root: 0
__EOF
  sudo install -o root -g root -m 0600 $tmp_cloud $prefix/var/lib/cloud/seed/nocloud/user-data

  rm -f $tmp_cloud

  # run and verify cloud init
  sudo cloud-init start-local || true
  sudo cloud-init-cfg all config
  sudo cloud-init-cfg all final
  sudo rm -f $prefix/var/lib/cloud/seed/nocloud/meta-data

  # update everything
  aptitude update
  if [[ "$(ps -o command 1 | tail -1)" != "/sbin/init" ]]; then
    mv /usr/bin/ischroot /usr/bin/ischroot.x
    ln -nfs $(which true) /usr/bin/ischroot
    cp -a /sbin/init /sbin/init.orig
  fi
  aptitude -y dist-upgrade
  aptitude -y safe-upgrade
  if [[ -x /usr/bin/ischroot.x ]]; then
    mv /usr/bin/ischroot.x /usr/bin/ischroot
  fi

  # hwe stacks for updated distro kernel
  aptitude install -y linux-{generic,tools}-lts-saucy
  aptitude hold -y linux-{generic,tools}-lts-saucy

  # don't upgrade kernel hereafter
  aptitude hold linux-{,{headers,image}-}{generic,server,virtual}

  # basic packages
  echo 'APT::Install-Recommends "0";' | tee /etc/apt/apt.conf.d/00DisableInstallRecommends
  echo 'Acquire::Languages "none";'  | tee /etc/apt/apt.conf.d/99DontAcquireLanguages
  aptitude -y install wget curl git rsync make bsdtar netcat dkms

  # package cleanup
  aptitude clean

  # ssl updates
  update-ca-certificates --fresh > /dev/null

  # github.com, bitbucket.org
  cat >> /etc/ssh/ssh_known_hosts <<EOF
github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
EOF

  # remove cached network configurations
  rm -rf /etc/udev/rules.d/70-persistent-net.rules /lib/udev/rules.d/75-persistent-net-generator.rules /dev/.udev /var/lib/dhcp3
  mkdir -p /etc/udev/rules.d/70-persistent-net.rules
}

if [[ "$#" = 0 ]]; then
  remote_install
  exit $?
fi

# figure out the project root under which bin, lib live
shome="$(unset CDPATH; cd -P -- "$(dirname -- "$BASH_SOURCE")/.." && pwd -P)"

# load a jason bourne library
source "$shome/libexec/_jason"
require boxcar
require boxcar_opt

bootstrap="$BASH_SOURCE"

# entry point
function main {
  local pth_ssh_config="$1"
  local ssh="ssh -F $pth_ssh_config"

  # enable ubuntu user for vagrant boxes
  if $ssh default id -a vagrant 2>&-; then
    $ssh default sudo install -o ubuntu -g ubuntu -m 0700 -d \~ubuntu/.ssh
    $ssh default sudo install -o ubuntu -g ubuntu -m 0600 \~vagrant/.ssh/authorized_keys \~ubuntu/.ssh/authorized_keys
  fi

  standard_root_hook "$bootstrap" "$@"
}

require sub "$BASH_SOURCE" "$@"
