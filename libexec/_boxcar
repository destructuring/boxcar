#!/usr/bin/env bash

if [[ "$#" > 0 ]]; then
  BOXCAR="$1"; shift
else
  : ${BOXCAR:="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"}
fi

: ${BOXCAR_GHOME:="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"}

export BOXCAR

boxcar_shome="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"

if [[ -z "${ORIGINAL_VBOX_MANAGE:-}" ]]; then
  ORIGINAL_VBOX_MANAGE="$(which VBoxManage 2>&- || true)"
  if [[ -x "${ORIGINAL_VBOX_MANAGE}" ]]; then
    export ORIGINAL_VBOX_MANAGE
    PATH="$boxcar_shome/libexec/virtualbox:$PATH"
  fi
fi

PATH="$PATH:$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)/libexec"

function fuglet {
  local pth_figlet="$(which figlet 2>&- || true)"
  if [[ -x "$pth_figlet" ]]; then
    "$pth_figlet" -w 425  "$@" | perl -pe 's{([ ]+)(\S)}{sprintf("%c",96) x length($1) . $2}ge'
  else
    printf "[[[ %s ]]]\n" "$*"
  fi
}

function until_port_open {
  local address="$1"; shift
  local port="$1"; shift

  logger_info "until $address:$port"

  while true; do
    if nc -z "$address" "$port"; then
      echo
      break
    fi
    echo -n "."
    sleep 5
  done
}

function demo_in_vagrant {
  local pth_custom="${@:$(($#))}"

  local tmp_ssh_config="$(mktemp -t XXXXXXXXX)"
  (cd $FLAGS_release_dir && vagrant ssh-config | sed -n '/^Host/,$p' | perl -ne 'unless (m{IdentitiesOnly} && $last !~ m{IdentityFile}) { print }; $last = $_' > "$tmp_ssh_config")
  $pth_custom "$tmp_ssh_config" "${@:1:$(($#-1))}"
  rm -f "$tmp_ssh_config"
}

function build_vagrant {
  mkdir -p $FLAGS_release_dir

  local nm_keypair="$(build_keypair)"
  rm -rf "$FLAGS_release_dir/.vagrant"
  demo_vagrant "$nm_keypair" "$FLAGS_boxname" "$@"
  early_termination

  if [[ "$OVERRIDE_fast" = "$FLAGS_TRUE" ]]; then
    (cd $FLAGS_release_dir && vagrant destroy -f)
  else
    bundle_vagrant
  fi

  delete_keypair "$nm_keypair"
}

function configure_remote_git_cache {
  local tmp_git_env="$(mktemp -t XXXXXXXXX)"
  printf "export GIT_USER=%s\n" "${GIT_USER:-$LOGNAME}" >> "$tmp_git_env"
  printf "export GIT_PORT=%s\n" "${GIT_PORT:-55555}" >> "$tmp_git_env"
  set +f
  rsync -e "ssh -F $pth_ssh_config" $BOXCAR_GHOME/libexec/with-git-cache $BOXCAR_GHOME/libexec/sbin/* default:.boxcar/
  set -f
  rsync -e "ssh -F $pth_ssh_config" $tmp_git_env default:.boxcar/env
  rm -f $tmp_git_env
}

function configure_remote_bootstrap {
  local pth_bootstrap="$1"; shift
  rsync -ia -e "ssh -F '$pth_ssh_config'" "$pth_bootstrap" default:.boxcar/
}

function configure_remote_aptitude {
  rsync -e "ssh -F $pth_ssh_config" $BOXCAR_GHOME/libexec/with-http-cache default:.boxcar/
  rsync -ia -e "ssh -F '$pth_ssh_config'" "$boxcar_shome/libexec/helpers/apt.conf" default:.boxcar/
}


function configure_remote_anchor {
  rsync -ia -e "ssh -F '$pth_ssh_config'" "$boxcar_shome/libexec/helpers/anchor" default:.boxcar/
}

function adjust_build_phase {
  local nm_hook="$1"; shift
  local next_phase="${nm_hook##*:}"
  if [[ "$next_phase" = "$nm_hook" ]]; then
    BUILD_IMAGE_PHASE="install"
  else
    BUILD_IMAGE_PHASE="$next_phase"
  fi
  export BUILD_IMAGE_PHASE
}

function start_image_hook {
  local pth_hook="$shome/libexec/boxcar-run"

  if [[ "$#" = 0 ]]; then
    fuglet NOT FOUND
    logger_fatal "missing build boxcar script arg"
    exit 1
  fi

  mark_output
  mark_log "boxcar"
  exec $shome/bin/train "$FLAGS_provider" "$@" "$pth_hook"
}

function continue_image_hook {
  local pth_ssh_config="$1"; shift

  if [[ "$#" = 0 ]]; then
    return 0
  fi

  logger_info "continuining with $@"
  adjust_build_phase "$1"
  local raw_hook="$1"; shift
  local nm_hook="${raw_hook%%:*}"
  local pth_hook="$(type -P boxcar-${nm_hook} 2>&- || true)"

  if [[ ! -x "$pth_hook" ]]; then
    fuglet NOT FOUND
    logger_fatal "could not find boxcar script for $nm_hook"
    return 1
  fi

  mark_output
  mark_log "$nm_hook"

  local tmp_meh="$(mktemp -t XXXXXX)"
  echo
  ssh -F "$pth_ssh_config" default uname -a
  rsync -ia -e "ssh -F $pth_ssh_config" default:/etc/hosts "$tmp_meh"
  rm -f "$tmp_meh"
  echo

  if [[ -n "$FLAGS_anchor" && "$FLAGS_anchor" != "." ]]; then
    ssh -F "$pth_ssh_config" default mkdir -p ${FLAGS_anchor} || ssh -F "$pth_ssh_config" root@default mkdir -p ${FLAGS_anchor}
  fi

  exec $pth_hook "$pth_ssh_config" "$@"
}

function custom_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift
  local root_loader="$1"; shift
  local nm_bootstrap="$(basename "$pth_bootstrap")"

  local ubuntu="$FLAGS_TRUE"
  if [[ "$(ssh -F $pth_ssh_config default uname -s)" != "Linux" ]]; then
    ubuntu="$FLAGS_FALSE"
  fi

  configure_remote_bootstrap "$pth_bootstrap"

  local cache_loaders=""

  if [[ -f "$PORT_SSHD_FILE" ]]; then
    configure_remote_git_cache
    cache_loaders="$cache_loaders ./.boxcar/with-git-cache"
  fi

  if [[ -f "$PORT_PROXY_FILE" ]]; then
    if [[ "$ubuntu" = "$FLAGS_TRUE" ]]; then
      configure_remote_aptitude
    fi
    cache_loaders="$cache_loaders ./.boxcar/with-http-cache"
  fi

  configure_remote_anchor

  fuglet "$nm_bootstrap"

  local sleepers=
  if [[ -n "${cache_loaders}" ]]; then
    if [[ -f "$PORT_SSHD_FILE" ]]; then
      logger_info "starting git cache"
      nc -z -v localhost $(cat $PORT_SSHD_FILE)
      ssh -F "$pth_ssh_config" -o ExitOnForwardFailure=yes -R 55555:127.0.0.1:$(cat $PORT_SSHD_FILE) default sleep 86400 &
      sleepers="$sleepers $!"
    fi

    if [[ -f "$PORT_PROXY_FILE" ]]; then
      logger_info "starting http cache/proxy"
      nc -z -v localhost $(cat $PORT_PROXY_FILE)
      ssh -F "$pth_ssh_config" -o ExitOnForwardFailure=yes -R 55556:127.0.0.1:$(cat $PORT_PROXY_FILE) default sleep 86400 &
      sleepers="$sleepers $!"
    fi
  fi

  if [[ -n "${PORT_SSHD_LOCAL:-}" ]]; then
    logger_info "starting ssh forward"
    ssh -F "$pth_ssh_config" -o ExitOnForwardFailure=yes -L ${PORT_SSHD_LOCAL}:127.0.0.1:22 default sleep 86400 &
    sleepers="$sleepers $!"

    while true; do
      if nc -z -v localhost $PORT_SSHD_LOCAL; then
        break
      fi
      sleep 1
    done
  fi

  logger_info "starting $nm_bootstrap"
  local failed=0
  echo "REMOTE: ssh -F $pth_ssh_config -A default exec ${root_loader:+${root_loader} }env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE OVERRIDE_apps="$OVERRIDE_apps" BUILD_BRANCH=${OVERRIDE_branch} $cache_loaders .boxcar/anchor ${OVERRIDE_anchor} .boxcar/$nm_bootstrap"
  ssh -F "$pth_ssh_config" -A default "exec ${root_loader:+${root_loader} }env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE OVERRIDE_apps="$(printf "%q" "$OVERRIDE_apps")" BUILD_BRANCH=${OVERRIDE_branch} $cache_loaders .boxcar/anchor ${OVERRIDE_anchor} .boxcar/$nm_bootstrap" || failed="$?"
  if [[ "$failed" = 0 ]]; then
    logger_info "success! $nm_bootstrap"

    if [[ "$ubuntu" = "$FLAGS_TRUE" ]]; then
      ssh -F "$pth_ssh_config" default sudo env LANG=C rm -vf /etc/apt/apt.conf.d/01proxy /var/run/reboot-required.pkgs /var/run/reboot-required || true
    fi

    ssh -F "$pth_ssh_config" default env LANG=C rm -vfr ./.boxcar
  else
    fuglet "exit code: $failed"

    logger_fatal "failed! $nm_bootstrap"
    local save_config="$(mktemp -t XXXXXX)"
    rsync -ia "$pth_ssh_config" "$save_config"

    if [[ -n "${cache_loaders}" ]]; then
      if [[ -f "$PORT_SSHD_FILE" ]]; then
        echo "  RemoteForward 55555 127.0.0.1:$(cat $PORT_SSHD_FILE)" >> "$save_config"
      fi

      if [[ -f "$PORT_PROXY_FILE" ]]; then
        echo "  RemoteForward 55556 127.0.0.1:$(cat $PORT_PROXY_FILE)" >> "$save_config"
      fi
    fi

    echo "  ForwardAgent yes" >> "$save_config"
    
    cat >> $OVERRIDE_failhook << ____EOF
    (ssh -F "$save_config" -t default "exec ${root_loader:+${root_loader} }env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE ${cache_loaders:+${cache_loaders} }bash")
____EOF
  fi

  if [[ -n "$sleepers" ]]; then
    kill -9 $sleepers || true
  fi

  return $failed
}

function standard_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift

  custom_hook "$pth_bootstrap" "$pth_ssh_config" '' "$@"
  continue_image_hook "$pth_ssh_config" "$@"
}

function standard_root_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift

  custom_hook "$pth_bootstrap" "$pth_ssh_config" 'sudo -E' "$@"
  continue_image_hook "$pth_ssh_config" "$@"
}

