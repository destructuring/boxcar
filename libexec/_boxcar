#!/bin/bash

if [[ "$#" > 0 ]]; then
  BOXCAR="$1"; shift
else
  : ${BOXCAR:="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"}
fi

: ${BOXCAR_GHOME:="$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)"}

export BOXCAR

PATH="$PATH:$(unset CDPATH; cd -P -- "$(dirname -- "${BASH_SOURCE}")/.." && pwd -P)/libexec"

function fuglet {
  local pth_figlet="$(which figlet 2>&- || true)"
  if [[ -x "$pth_figlet" ]]; then
    "$pth_figlet" -w 425  "$@" | perl -pe 's{([ ]+)(\S)}{sprintf("%c",96) x length($1) . $2}ge'
  else
    printf "==== %s\n", "$*"
  fi
}

function until_port_open {
  local address="$1"; shift
  local port="$1"; shift

  logger_info "until $address:$port"

  while true; do
    if nc -z "$address" "$port"; then
      echo
      break
    fi
    echo -n "."
    sleep 5
  done
}

function demo_in_vagrant {
  local pth_custom="${@:$(($#))}"

  local tmp_ssh_config="$(mktemp -t XXXXXXXXX)"
  (cd $FLAGS_release_dir && vagrant ssh-config | sed -n '/^Host/,$p' > "$tmp_ssh_config")
  $pth_custom "$tmp_ssh_config" "${@:1:$(($#-1))}"
  rm -f "$tmp_ssh_config"
}

function build_vagrant {
  mkdir -p $FLAGS_release_dir

  local nm_keypair="$(build_keypair)"
  demo_vagrant "$nm_keypair" "$FLAGS_boxname" "$@"
  early_termination
  bundle_vagrant

  delete_keypair "$nm_keypair"
}

function configure_remote_git_cache {
  local username="$1"; shift

  local tmp_git_env="$(mktemp -t XXXXXXXXX)"
  printf "export GIT_USER=%s\n" "$LOGNAME" >> "$tmp_git_env"
  printf "export GIT_PORT=%s\n" "55555" >> "$tmp_git_env"
  ssh -F $pth_ssh_config "$username"default mkdir -p .git-sbin
  set +f
  rsync -e "ssh -F $pth_ssh_config" $BOXCAR_GHOME/libexec/with-git-cache $BOXCAR_GHOME/libexec/with-http-cache $BOXCAR_GHOME/libexec/sbin/* "$username"default:.git-sbin/
  set -f
  rsync -e "ssh -F $pth_ssh_config" $tmp_git_env "$username"default:.git-env
  rm -f $tmp_git_env
}

function configure_root_ssh {
  ssh -F $pth_ssh_config default sudo env REMOTE='$(uname -n)' perl -pe "s\{localhost\\s*\?.\*\}\{localhost\ \\\$ENV\{\"REMOTE\"\}\}" -i /etc/hosts
  ssh -F $pth_ssh_config default sudo install -o root -g root -m 0700 -d \~root/.ssh
  ssh -F $pth_ssh_config default sudo install -o root -g root -m 0600 \~/.ssh/authorized_keys \~root/.ssh/authorized_keys
}

function configure_remote_bootstrap {
  local pth_bootstrap="$1"; shift
  local username="$1"; shift
  rsync -ia -e "ssh -F '$pth_ssh_config'" "$pth_bootstrap" "$username"default:
}

function configure_remote_aptitude {
  echo 'Acquire::http { Proxy "http://127.0.0.1:55556"; };' | ssh -F "$pth_ssh_config" default sudo tee /etc/apt/apt.conf.d/01proxy 
}

function adjust_build_phase {
  local nm_hook="$1"; shift
  local next_phase="${nm_hook##*:}"
  if [[ "$next_phase" = "$nm_hook" ]]; then
    BUILD_IMAGE_PHASE="install"
  else
    BUILD_IMAGE_PHASE="$next_phase"
  fi
  export BUILD_IMAGE_PHASE
}

function start_image_hook {
  local pth_hook="$shome/libexec/boxcar-run"

  if [[ "$#" = 0 ]]; then
    fuglet NOT FOUND
    logger_fatal "missing build boxcar script arg"
    exit 1
  fi

  mark_output
  mark_log "boxcar"
  exec $shome/bin/train "$FLAGS_provider" "$@" "$pth_hook"
}

function continue_image_hook {
  local pth_ssh_config="$1"; shift

  if [[ "$#" = 0 ]]; then
    return 0
  fi

  logger_info "continuining with $@"
  adjust_build_phase "$1"
  local raw_hook="$1"; shift
  local nm_hook="${raw_hook%%:*}"
  local pth_hook="$(type -P boxcar-${nm_hook} 2>&- || true)"

  if [[ ! -x "$pth_hook" ]]; then
    fuglet NOT FOUND
    logger_fatal "could not find boxcar script for $nm_hook"
    return 1
  fi

  mark_output
  mark_log "$nm_hook"
  exec $pth_hook "$pth_ssh_config" "$@"
}

function custom_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift
  local username="$1"; shift
  local nm_bootstrap="$(basename "$pth_bootstrap")"

  configure_root_ssh
  configure_remote_bootstrap "$pth_bootstrap" "$username"

  local cache_loaders=""

  if [[ -f "$PORT_SSHD_FILE" ]]; then
    configure_remote_git_cache "$username"
    cache_loaders="$cache_loaders ./.git-sbin/with-git-cache"
  fi

  if [[ -f "$PORT_PROXY_FILE" ]]; then
    configure_remote_aptitude
    cache_loaders="$cache_loaders ./.git-sbin/with-http-cache"
  fi

  ssh -F "$pth_ssh_config" default sudo atrm $(ssh -F "$pth_ssh_config" default sudo atq | awk '{print $1}') 2>&- > /dev/null || true
  ssh -F "$pth_ssh_config" default 'echo poweroff | sudo at now + 50 minutes'

  fuglet "$nm_bootstrap"
  logger_info "starting $nm_bootstrap"
  ssh -F "$pth_ssh_config" -R 55555:127.0.0.1:$(cat $PORT_SSHD_FILE) -R 55556:127.0.0.1:$(cat $PORT_PROXY_FILE) -f default sleep 3600 || true &
  local failed
  if ssh -F "$pth_ssh_config" -A ${username}default "env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE $cache_loaders ./$nm_bootstrap"; then
    failed=$?
    logger_info "finished $nm_bootstrap"
    ssh -F "$pth_ssh_config" default sudo env LANG=C rm -vf /etc/apt/apt.conf.d/01proxy /var/run/reboot-required.pkgs /var/run/reboot-required
    ssh -F "$pth_ssh_config" ${username}default env LANG=C rm -vf  "./$nm_bootstrap" ./.git-env
    ssh -F "$pth_ssh_config" ${username}default env LANG=C rm -vfr ./.git-sbin
    ssh -F "$pth_ssh_config" default pkill sleep 2>&- || true
  else
    failed=$?
    fuglet "FAILED $nm_bootstrap"
    logger_fatal "failed! $nm_bootstrap"
    local save_config="$(mktemp -t XXXXXX)"
    rsync -ia "$pth_ssh_config" "$save_config"
    echo ssh -F "$save_config" -t -A "$username"default "\"env BUILD_IMAGE_PHASE=$BUILD_IMAGE_PHASE $cache_loaders bash\""
  fi

  ssh -F "$pth_ssh_config" default sudo atrm $(ssh -F "$pth_ssh_config" default sudo atq | awk '{print $1}') || true
  return $failed
}

function standard_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift

  custom_hook "$pth_bootstrap" "$pth_ssh_config" '' "$@"
  continue_image_hook "$pth_ssh_config" "$@"
}

function standard_root_hook {
  local pth_bootstrap="$1"; shift
  local pth_ssh_config="$1"; shift

  custom_hook "$pth_bootstrap" "$pth_ssh_config" 'root@' "$@"
  continue_image_hook "$pth_ssh_config" "$@"
}

